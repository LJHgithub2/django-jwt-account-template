# -d : 데몬 모드(백그라운드) 실행
# 컨테이너 중지 및 네트워크: docker compose down
# 빌드 후 실행 : docker compose up -d --build
# 특정 서비스만 다시 빌드 후 실행 : docker compose up -d --build {서비스명}
# 컴포즈 빌드하지 않고 재실행 : docker compose up -d
# 중지 : docker compose down
# 특정 서비스만 재시작 : docker compose restart backend
# 로그 확인 : docker compose logs -f {서비스명}
# 실행 중인 서비스 확인 : docker compose ps

# DB 변동만 있을 시
# docker compose exec backend python manage.py makemigrations
# docker compose run --rm backend python manage.py migrate --noinput

services:
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile         # backend/dockerfile 사용
    # python manage.py makemigrations은 로컬에서 돌려야 함 -> 협업을 위해 
    command: >
      sh -c "python manage.py migrate &&
            python manage.py initadmin && # 최초 1회에 한해 슈퍼유저 생성
             python manage.py runserver 0.0.0.0:8002"
    ports:
      - "8002:8002"                  # 호스트:컨테이너
    volumes:
      - ./backend:/app               # 코드 동기화(backend Dockerfile의 WORKDIR가 /app이라 가정)
    env_file:
      - ./common.env           # 공용 환경변수
      - ./backend/backend.env              
    depends_on: # db가 준비된 후 시작
      db:
        condition: service_healthy 
    restart: unless-stopped

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: dockerfile         # frontend/dockerfile 사용
  #   command: >
  #     sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
  #   ports:
  #     - "5173:5173"                  # 프론트 개발서버 포트 (Vite 기준)
  #   volumes:
  #     - ./frontend:/app              # 프론트 코드 동기화(WORKDIR=/app 가정)
  #   env_file:
  #     - ./common.env                 # 공용 환경변수
  #     - ./frontend/frontend.env
  #   depends_on: # backend가 준비된 후 시작
  #     - backend
  #   restart: unless-stopped

  db:
    image: mysql:8.0                  # ✅ MySQL 공식 이미지 사용
    # 서버 기본 문자셋을 utf-8 계열로 지정(이모지 포함 가능)
    command: ["--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    env_file:
      - ./db/db.env                  # MySQL 초기화 변수(MYSQL_* -> 유저, 디비이름, 비번 등)
    # 내부에서만 사용
    # ports:
    #   - "3306:3306"         
    volumes:
      - db-data:/var/lib/mysql       # MySQL 데이터 영속화
      # djagno ORM으로 대체
      # - ./db/init:/docker-entrypoint-initdb.d # 최초 1회에 한해 실행할 초기화 스크립트
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10                    # MySQL 기동이 느릴 수 있어 여유 있게
    restart: unless-stopped

volumes:
  # docker 컨테이너 관리 폴더에 생성
  db-data:
